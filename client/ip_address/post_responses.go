// Code generated by go-swagger; DO NOT EDIT.

package ip_address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostReader is a Reader for the Post structure.
type PostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostOK creates a PostOK with default headers values
func NewPostOK() *PostOK {
	return &PostOK{}
}

/*PostOK handles this case with default header values.

OK
*/
type PostOK struct {
	Payload *PostOKBody
}

func (o *PostOK) Error() string {
	return fmt.Sprintf("[POST /][%d] postOK  %+v", 200, o.Payload)
}

func (o *PostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostOKBody post o k body
swagger:model PostOKBody
*/
type PostOKBody struct {

	// result
	Result *PostOKBodyResult `json:"result,omitempty"`
}

// Validate validates this post o k body
func (o *PostOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBody) UnmarshalBinary(b []byte) error {
	var res PostOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOKBodyResult post o k body result
swagger:model PostOKBodyResult
*/
type PostOKBodyResult struct {

	// data
	Data *PostOKBodyResultData `json:"data,omitempty"`

	// status
	Status bool `json:"status,omitempty"`
}

// Validate validates this post o k body result
func (o *PostOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOKBodyResult) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOK" + "." + "result" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBodyResult) UnmarshalBinary(b []byte) error {
	var res PostOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOKBodyResultData post o k body result data
swagger:model PostOKBodyResultData
*/
type PostOKBodyResultData struct {

	// connection state
	ConnectionState string `json:"ConnectionState,omitempty"`

	// DNS servers
	DNSServers string `json:"DNSServers,omitempty"`

	// IP address
	IPAddress string `json:"IPAddress,omitempty"`

	// ipv6 address
	IPV6Address string `json:"IPv6Address,omitempty"`

	// ipv6 delegated prefix
	IPV6DelegatedPrefix string `json:"IPv6DelegatedPrefix,omitempty"`

	// last connection error
	LastConnectionError string `json:"LastConnectionError,omitempty"`

	// link state
	LinkState string `json:"LinkState,omitempty"`

	// link type
	LinkType string `json:"LinkType,omitempty"`

	// m a c address
	MACAddress string `json:"MACAddress,omitempty"`

	// protocol
	Protocol string `json:"Protocol,omitempty"`

	// remote gateway
	RemoteGateway string `json:"RemoteGateway,omitempty"`

	// wan state
	WanState string `json:"WanState,omitempty"`
}

// Validate validates this post o k body result data
func (o *PostOKBodyResultData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOKBodyResultData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOKBodyResultData) UnmarshalBinary(b []byte) error {
	var res PostOKBodyResultData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
